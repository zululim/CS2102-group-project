CREATE OR REPLACE FUNCTION not_pcs()			-- ISA nonoverlap for non admin (can be ct or po)
RETURNS TRIGGER AS		
$$ BEGIN 
    SELECT COUNT(*) AS ctx FROM nonadmin na
    WHERE NEW.name = na.name;
    IF ctx > 0 THEN
	RETURN NULL;
    ELSE
	RETURN NEW;
    END IF;
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER check_new
BEFORE INSERT OR UPDATE ON nonadmin
FOR EACH ROW EXECUTE PROCEDURE not_pcs();



CREATE OR REPLACE FUNCTION min_price()			-- checking that the price ct charges 
RETURNS TRIGGER AS					-- is higher than the min price set by pcs
$$ BEGIN
    PERFORM * FROM determines_mpl MPL 
    WHERE NEW.pet_type = MPL.pet_type AND NEW.price >= MPL.price;
    IF NOT FOUND THEN 
        RETURN NULL;
    ELSE
        RETURN NEW;
    END IF;
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER check_price
BEFORE INSERT OR UPDATE ON c_pricelist
FOR EACH ROW EXECUTE PROCEDURE min_price();



DECLARE ctx NUMERIC;
CREATE OR REPLACE FUNCTION has_availability()		-- checking if the ct is available at the 
RETURNS TRIGGER AS					-- wanted time. 
$$ BEGIN
    SELECT COUNT(*) AS ctx FROM has_availability HA
    WHERE NEW.name = HA.name AND NEW.date = HA.date;
    IF ctx > 0 THEN 
	RETURN NEW;
    ELSE
	RETURN NULL;
    END IF; 
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER is_available
BEFORE INSERT OR UPDATE ON bids_for
FOR EACH ROW EXECUTE PROCEDURE has_availability();


DECLARE ctx AS NUMERIC;
CREATE OR REPLACE FUNCTION check_possibility()		-- checking if the ct can take care of
RETURNS TRIGGER AS					-- the pet type
$$ BEGIN 
    SELECT COUNT(*) AS ctx FROM c_pricelist CPL 
    WHERE NEW.name=CPL.cname AND NEW.pet_type=CPL.pet_type;
    IF ctx > 0 THEN 
	RETURN NEW; 
    ELSE 
	RETURN NULL; 
    END IF; 
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER is_possible
BEFORE INSERT OR UPDATE ON bids_for
FOR EACH ROW EXECUTE PROCEDURE check_possibility();



CREATE OR REPLACE FUNCTION check_load()			-- checking that the cur_load of ct is 
RETURNS TRIGGER AS 					-- less than the max number allowed. 
$$ BEGIN
    SELECT cur_load, max FROM caretakers CT
    WHERE NEW.caretaker=CT.name;
    IF cur_load <= max THEN 
	RETURN NEW; 
    ELSE 	
	RETURN NULL; 
    END IF; 
    END; $$
LANGUAGE plpgsql; 

CREATE TRIGGER can_load
BEFORE INSERT OR UPDATE ON bids_for
FOR EACH ROW EXECUTE PROCEDURE check_load();



-- one more trigger for updating the reviews when the bid is completed. 
