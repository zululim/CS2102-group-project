CREATE OR REPLACE FUNCTION not_pcs()
RETURNS TRIGGER AS $$
DECLARE ctx AS NUMERIC;
$$ BEGIN 
	SELECT COUNT(*) INTO ctx FROM nonadmin na
	WHERE NEW.name=na.name;
	IF ctx > 0 THEN
		RETURN NULL;
	ELSE
		RETURN NEW
	END IF;
	END; $$
LANGUAGE plpgsql;

CREATE TRIGGER check_new()
BEFORE INSERT OR UPDATE ON non_admin
FOR EACH ROW EXECUTE PROCEDURE not_pcs();



CREATE OR REPLACE FUNCTION min_price()
RETURNS TRIGGER AS
$$ BEGIN
    SELECT pet_type FROM determines_mpl MPL 
    WHERE NEW.pet_type = MPL.pet_type;
   IF NEW.price >= MPL.price
   THEN 
    RETURN NEW;
   ELSE
    RETURN MPL.price;
   END IF;
   END; $$
LANGUAGE plpgsql;

CREATE TRIGGER check_price()
BEFORE INSERT OR UPDATE ON c_pricelist
FOR EACH ROW EXECUTE PROCEDURE min_price();




CREATE OR REPLACE FUNCTION check_availability()
RETURNS TRIGGER AS $$
DECLARE ctx NUMERIC;
$$ BEGIN
    SELECT COUNT(*) INTO ctx FROM has_availability HA
    WHERE NEW.name = HA.name AND NEW.date = HA.date;
    IF ctx > 0 THEN 
	RETURN NEW;
    ELSE
	RETURN NULL;
    END IF; 
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER is_available()
BEFORE INSERT OR UPDATE ON bids_for
FOR EACH ROW EXECUTE PROCEDURE has_availability();

