-- This trigger ensures that an existing admin user cannot be inserted as a non admin user
CREATE OR REPLACE FUNCTION not_pcs()
RETURNS TRIGGER AS		
$$ BEGIN 
    PERFORM * FROM pcsadmin pa
    WHERE NEW.name = pa.name AND new.phone = pa.phone;
    IF NOT FOUND THEN
	RETURN NEW;
    ELSE
	RETURN NULL;
    END IF;
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER check_new
BEFORE INSERT OR UPDATE ON nonadmin
FOR EACH ROW EXECUTE PROCEDURE not_pcs();



-- This trigger ensures that the price set by the caretaker cannot be lower than the price defined in Minimum Price List
CREATE OR REPLACE FUNCTION min_price()
RETURNS TRIGGER AS
$$ BEGIN
    PERFORM * FROM determines_mpl MPL 
    WHERE NEW.pet_type = MPL.pet_type AND NEW.price >= MPL.price;
    IF NOT FOUND THEN 
        RETURN NULL;
    ELSE
        RETURN NEW;
    END IF;
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER check_price
BEFORE INSERT OR UPDATE ON c_pricelist
FOR EACH ROW EXECUTE PROCEDURE min_price();



-- This trigger ensures that a bid information is passed only when it is within the available date of the caretaker.
DECLARE ctx NUMERIC;
CREATE OR REPLACE FUNCTION has_availability()
RETURNS TRIGGER AS
$$ BEGIN
    PERFORM * FROM has_availability HA
    WHERE NEW.caretaker = HA.caretaker AND NEW.date = HA.date;
    IF NOT FOUND THEN 
	RETURN NULL;
    ELSE
	RETURN NEW;
    END IF; 
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER is_available
BEFORE INSERT OR UPDATE ON bids_for
FOR EACH ROW EXECUTE PROCEDURE has_availability();



-- This trigger ensures that the caretaker has the abilibity to take care of this kind of pet.
CREATE OR REPLACE FUNCTION check_possibility()
RETURNS TRIGGER AS
$$ BEGIN 
    PERFORM * FROM c_pricelist CPL 
    WHERE NEW.caretaker = CPL.cname AND NEW.pet_type=CPL.pet_type;
    IF NOT FOUND THEN 
	RETURN NULL; 
    ELSE 
	RETURN NEW; 
    END IF; 
    END; $$
LANGUAGE plpgsql;

CREATE TRIGGER is_possible
BEFORE INSERT OR UPDATE ON bids_for
FOR EACH ROW EXECUTE PROCEDURE check_possibility();


-- This trigger ensures that caretaker who reaches maxinum load cannot be bidded
CREATE OR REPLACE FUNCTION check_load()	
RETURNS TRIGGER AS 
$$ BEGIN
    PERFORM * FROM c_ratings CR, has_availability HA
    WHERE NEW.caretaker = CR.cname AND NEW.cphone = CR.cphone
    AND NEW.caretaker = HA.caretaker AND NEW.cphone = HA.phone AND NEW.date = HA.date
    AND HA.cur_load < CR.max_load;
    IF NOT FOUND THEN 
	RETURN NULL; 
    ELSE 	
	RETURN NEW; 
    END IF; 
    END; $$
LANGUAGE plpgsql; 

CREATE TRIGGER can_load
BEFORE INSERT OR UPDATE ON bids_for
FOR EACH ROW EXECUTE PROCEDURE check_load();



