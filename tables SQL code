DROP TABLE IF EXISTS bids_for cascade;
DROP TABLE IF EXISTS c_pricelist cascade;
DROP TABLE IF EXISTS c_ratings cascade;
DROP TABLE IF EXISTS caretakers cascade;
DROP TABLE IF EXISTS determines_mpl cascade;
DROP TABLE IF EXISTS has_availability cascade;
DROP TABLE IF EXISTS leave_applied cascade;
DROP TABLE IF EXISTS nonadmin cascade;
DROP TABLE IF EXISTS owns cascade;
DROP TABLE IF EXISTS pcsadmin cascade;
DROP TABLE IF EXISTS pet_days cascade;
DROP TABLE IF EXISTS petowner cascade;
DROP TABLE IF EXISTS salary cascade;
DROP TABLE IF EXISTS taken_care_of cascade;
DROP TABLE IF EXISTS users cascade;


-- CREATE TYPE transfer AS ENUM('0','1','2');	-- 0 for pet owner deliver, 1 for caretaker pick up, 2 for physical transfer
-- CREATE TYPE employed_as AS ENUM ('0', '1');	-- 0 for pt and 1 for ft
-- CREATE TYPE status as ENUM('0', '1', '2'); 	-- 0 (pending) , 1 (in prog) , 2(completed)


CREATE TABLE users(
	name 		VARCHAR (100),
	phone 		INTEGER,
	PRIMARY KEY(phone)
);

CREATE TABLE pcsadmin (
	name 		VARCHAR(100),
	phone 		INTEGER,
	FOREIGN KEY(phone) REFERENCES users(phone) ON DELETE cascade ON UPDATE cascade,
	PRIMARY KEY(phone)
);


CREATE TABLE nonadmin(					-- ISA table for this has to be overlap so this is one
	name 		VARCHAR (100),		-- constrain that is not shown in the ERD. 
	phone 		INTEGER,
	address 	VARCHAR (100) NOT NULL,
	transfer 	transfer NOT NULL,
	FOREIGN KEY(phone) REFERENCES users(phone) ON DELETE cascade ON UPDATE cascade,
	PRIMARY KEY(phone)
);

CREATE TABLE petowner (
	name 				VARCHAR (100),
	phone 				INTEGER,
	address 			VARCHAR (100) NOT NULL,
	transfer 			transfer NOT NULL,
	c_card_info 			VARCHAR(30) NOT NULL,
	require_date 			DATE DEFAULT NULL,
	FOREIGN KEY(phone) REFERENCES nonadmin(phone) ON DELETE cascade ON UPDATE cascade,
	PRIMARY KEY(phone)
);

CREATE TABLE caretakers (
	name 		VARCHAR (100),
	phone 		INTEGER,
	address 	VARCHAR (100) NOT NULL,
	transfer 	transfer NOT NULL, 
	FOREIGN KEY(phone) REFERENCES nonadmin(phone),
	PRIMARY KEY(phone)
);


CREATE TABLE c_ratings (					-- keeps track of the ratings of the caretaker
	cname 					VARCHAR, 
	cphone 					INTEGER,	
	employed 				employed_as NOT NULL,
	total_pets_taken_care_of 		INTEGER DEFAULT 0,
	total_sum_ratings 			INTEGER DEFAULT 0,
	overall_rating 				NUMERIC(2, 1) DEFAULT 0 CHECK (overall_rating <= 5),
	max_load 				INTEGER DEFAULT 0 CHECK ((max_load <= 5 AND employed='1') OR (max_load<=2 AND employed='0') OR (max_load<=5 AND employed='0' AND overall_rating>=4)),
	FOREIGN KEY (cphone) REFERENCES caretakers (phone),
	PRIMARY KEY (cphone)
);

CREATE TABLE has_availability (
	caretaker 	VARCHAR(100),
	phone 		INTEGER, 
	date 		DATE,
	cur_load 	INTEGER DEFAULT 0,
	FOREIGN KEY (phone) REFERENCES caretakers(phone) ON DELETE cascade ON UPDATE cascade,
	PRIMARY KEY (phone, date)
);

CREATE TABLE c_pricelist (			-- price of each caretaker might change due to rating, prices here are a full day price.
	cname 		VARCHAR, 
	cphone 		INTEGER, 
	pet_type 	VARCHAR,
	price 		INTEGER, 
	FOREIGN KEY (cphone) REFERENCES caretakers(phone) ON DELETE cascade ON UPDATE cascade,
	PRIMARY KEY (cphone, pet_type)
);

CREATE TABLE determines_mpl (
	pcsadmin 	VARCHAR, 
	phone 		INTEGER,
	pet_type 	VARCHAR, 
	price 		INTEGER NOT NULL,
	FOREIGN KEY (phone) REFERENCES pcsadmin(phone) ON DELETE cascade ON UPDATE cascade, 
	PRIMARY KEY (phone, pet_type)
);

CREATE TABLE owns (
	owner 			VARCHAR(100),
	phone 			INTEGER NOT NULL, 
	pet_name 		VARCHAR(100),
	pet_type 		VARCHAR(100),
	special_reqs 	VARCHAR(500),
	FOREIGN KEY (phone)  REFERENCES petowner(phone) ON DELETE CASCADE ON UPDATE cascade,
	PRIMARY KEY (phone, pet_name)
);

CREATE TABLE bids_for (
	caretaker 	VARCHAR(100) ,
	cphone 		INTEGER NOT NULL,
	petowner 	VARCHAR(100),
	pphone          INTEGER NOT NULL,
	date 		DATE,
	pet_name 	VARCHAR(100),
	pet_type 	VARCHAR(100) NOT NULL,
	special_reqs 	VARCHAR(100), 
	status 		status NOT NULL, 
	trans_mtd 	VARCHAR NOT NULL, 
	pay_mtd 	VARCHAR NOT NULL, 
	rating 		INTEGER NOT NULL, 
	year 		INTEGER DEFAULT 0,
	month 		INTEGER DEFAULT 0,
	cost 		INTEGER DEFAULT 0,
	FOREIGN KEY (pphone, pet_name, pet_type) REFERENCES owns(phone, pet_name, pet_type) ON DELETE CASCADE ON UPDATE cascade,
	FOREIGN KEY (cphone, date) REFERENCES has_availability(phone, date) ON DELETE CASCADE ON UPDATE cascade,
	PRIMARY KEY (cphone, pphone, date, pet_name)
);

CREATE TABLE pet_days(							-- keeps track of the number of pet days each care taker has in a month
	caretaker 	VARCHAR,
	cphone 		INTEGER NOT NULL,
	date 		DATE NOT NULL, 				-- represents for that month
	year 		INTEGER DEFAULT 0,
	month 		INTEGER DEFAULT 0, 
	pet_days 	INTEGER DEFAULT 0,				-- pet_days is the total number of pets taken care of in a month
	FOREIGN KEY (cphone) REFERENCES caretakers (phone) ON DELETE cascade ON UPDATE cascade,
	PRIMARY KEY (cphone, date)
);

CREATE TABLE leave_applied (			-- should be empty until the caretaker wants to apply for leave
	caretaker 	VARCHAR,
	phone 		INTEGER, 
	leave_applied 	DATE, 
	successful 	BOOLEAN DEFAULT FALSE,
	FOREIGN KEY (phone) REFERENCES caretakers(phone) ON DELETE cascade ON UPDATE cascade, 
	PRIMARY KEY (phone, leave_applied)
);

CREATE TABLE salary(							-- salary of the caretaker in the month
	caretaker 	VARCHAR NOT NULL,
	cphone 		INTEGER NOT NULL, 
	employed 	employed_as, 
	petowner 	VARCHAR NOT NULL, 
	pphone 		INTEGER NOT NULL, 
	pet_name 	VARCHAR NOT NULL,
	pet_type 	VARCHAR NOT NULL, 
	price 		INTEGER NOT NULL, 
	date 		DATE NOT NULL,
	year 		INTEGER DEFAULT 0,
	month 		INTEGER DEFAULT 0,	
	total_cost 	INTEGER DEFAULT 0,
	final_salary INTEGER DEFAULT 0,
	FOREIGN KEY (cphone, pphone, date, pet_name) REFERENCES bids_for(cphone, pphone, date, pet_name), 
	FOREIGN KEY (pet_type, cphone) REFERENCES c_pricelist(pet_type, cphone), 
	PRIMARY KEY (cphone, pet_name, date)
);


CREATE TABLE taken_care_of (						-- so each row will represent one pet the caretaker has taken care of
	caretaker VARCHAR, 
	cphone INTEGER, 
	petowner VARCHAR,
	pphone INTEGER,
	pet_name VARCHAR, 
	date DATE,
	FOREIGN KEY (cphone, pphone, date, pet_name) REFERENCES bids_for(cphone, pphone, date, pet_name), 
	FOREIGN KEY (cphone) REFERENCES caretakers(phone),
	PRIMARY KEY (cphone, pphone, pet_name, date)
);

---------------------------------------------------------- UPDATE TABLES --------------------------------------------------------------------------
UPDATE bids_for SET month = EXTRACT (MONTH FROM "date");
UPDATE bids_for SET year = EXTRACT (YEAR FROM "date");
UPDATE bids_for SET cost = (SELECT DISTINCT price FROM c_pricelist WHERE cname=caretaker);	-- assuming one day is 8 hours, can change 

UPDATE c_ratings SET total_sum_ratings = (SELECT SUM(rating) FROM bids_for WHERE caretaker=cname);
UPDATE c_ratings SET total_pets_taken_care_of = (SELECT COUNT(*) FROM bids_for WHERE caretaker=cname);
UPDATE c_ratings SET overall_rating = total_sum_ratings/total_pets_taken_care_of;
UPDATE c_ratings SET max_load=5 WHERE employed='1';

UPDATE pet_days SET month = EXTRACT (MONTH FROM "date");
UPDATE pet_days SET year = EXTRACT (YEAR FROM "date");
UPDATE pet_days SET pet_days = (SELECT COUNT(*) FROM bids_for WHERE caretaker=pet_days.caretaker AND year=pet_days.year AND month=pet_days.month);

UPDATE salary SET month = EXTRACT (MONTH FROM "date");
UPDATE salary SET year = EXTRACT (YEAR FROM "date");
UPDATE salary SET total_cost = CASE WHEN (employed='1') THEN price*0.8 ELSE price*0.75 END;
UPDATE salary SET final_salary = CASE WHEN employed='0' THEN total_cost ELSE (CASE WHEN (SELECT COUNT(*) FROM salary)<=60 AND employed='1'THEN 3000 ELSE 3000 + (SELECT SUM(total_cost) FROM salary) END) END;

UPDATE has_availability SET cur_load= (SELECT COUNT(*) FROM bids_for WHERE caretaker=has_availability.caretaker AND date=has_availability.date);

UPDATE leave_applied SET successful = CASE WHEN (SELECT cur_load FROM has_availability WHERE date=leave_applied)=0 THEN TRUE ELSE FALSE END;
---------------------------------------------------------------------------------------------------------------------------------------------





